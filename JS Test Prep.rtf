{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c100000;\csgenericrgb\c0\c0\c0;}
\margl1440\margr1440\vieww18920\viewh12080\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 .shift        //removes the first element from an array and returns that element, changes length of array.    arr.shift();\
\
.pop          //removes the last element from an array and returns that element, changes length of array.    arr.pop();\
\
.push.       //adds one or more elements to the end of an array and returns the new length of the array.   arr.push(element, element);\
\
.unshift     //adds one or more elements to the beginning of an array and returns the new length of the array.  arr.unshift(element, element);\
\
.slice	     //returns portion of array into a new array, selected from begin to end.  Original array will not be modified.   Arr.slice(begin-index, end-index);\
\
.splice      //changes the content of an array by removing existing elements and/or adding new elements.    arr.splice(start, deleteCount, item1, item2); \
												                                        arr.splice(start, deleteCount);\
\
\
dot notation: 		object.property\
Bracket notation: 	object[\'93property\'94\}\
\
To change object property to new property: \
\
			object.property = \'93new property\'94;\
			object[\'93property\'94] = \'93new property\'94;\
\
\
Math.pow = multiplies first parameter by itself like an exponent (x to the y power) (4,3) == (4*4*4)\
\
Function exponent(num, times) \{\
	var itself = Math.pow(num, times);\
	return itself;\
\}\
\
\
\
JS primitives: booleans, undefined, null, NaN. \
\
Statements & expressions: Anything you can do on a single line of JS. \
\
Sometimes the best way to solve a problem is to do the opposite. \
\
Comparisons: ==	> 	<	>=	<=	!= (not equal to) \
\
You can compare any two things in JS. \
\
== vs === is data types. Numbers can always become strings but not reversed. \
\
(\'9210\'92 == 10) //true\
(\'9210\'92 === 10) //false\
(\'9210\'92 !== 10) //true\
\
Almost always use ===\
\
Falsy: Returns false when converted into boolean.  0 \'93\'94 undefined null false NaN\
\
Truthy: anything else returns true when converted into a boolean.\
\
== forces into a boolean. \
\
Falsy: the values that are forced into a boolean return false. \
\
Truthy: the values that are forced into a boolean return true.\
\
Variable into if  if(isLoggedIn) will force into boolean. If(arr.length)\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Functions: repeatable instructions with specific output. Like electric slide or machine that does nothing until called(turned on). Parameter is the penny you put into the machine. Return is the keyword to get something back. \
\
Returning a value. Invoke a function the only way to get code inside function to go. \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\b Var name1 = \'93jared\'94;\

\b0 \

\b Function capitalizationName(Name1) \{\
	name1 = name1[0].toUpperCase() + name1.slice(1);\
		return name;\
\
Var name = capitalizeName(\'91Jared\'92);  //
\b0 takes value that came out and lands it in the new variable. \
\
Scope:\
\
Apply when you have functions inside of functions. \
\
If you forget var you accidentally create global variables in your code-not smart idea. \
\
Var = makes new entry in function\'92s dictionary. \
\
You can never directly access child from parent. The deeper you go the more specific you get so the most specific child has the most power. Child can go up the chain and change what\'92s in the parent. Can\'92t go down into function to find variable. You can\'92t go into siblings either. \
\
Function capitalizeName(name) = automatically have var in front. \
\
Parameters and arguments both act like you automatically put var in front of it. Parameters are local to the function. \
\
File loaded in last overrides those loaded in first with the same function names. etc. \
\
Returning functions from functions: \
\
Function outer() \{\
Return 5;\
\}\
outer(); \
\
Function outer() \{\
Function inner() \{\
Return 10;\
\}\
Returner inner;\
\}\
Inner; <\'97 this inner is the entire function. \
\
Outer;\
\
Outer;\
Var x = outer();\
x;\
x();\
Var y - x();\
(Y === 10);\
\
\
Callbacks: a patter of giving a function another function to invoke. 
\b \
\
\
Function One(cb) \{\
	cb(response)\
\}\
One(function(responses)) \{\
		// do something with response\
\})\
\
\
\
\cf2 Function one(data1, date2, cb) \{\
	//async code\
Var response = data1 + data2 ; \
	//call the cb when the data is ready\
SetTimeOUt(function) \{\
	\} 3000)\
\}\
one(3, 5, function(response) \{\
Console.log(\'93after three seconds we get, \'93 response);\
\})\
console.log(\'91this will log before the cb is called\'92);\
\
\
\
\cf0 Function lazy(cbfunction, value) \{\
	return cbfunction(value);\
\}\
Function alertstuff(value) \{\
	alert(values);\
\}\
lazy(alertstuff, \'93hello world\'92);\
\
\
Array: 
\b0 \
\
Var hand = [\'914s\'92, \'913c\'92, \'91kh\'92, \'91qd\'92, \'917c\'92];\
\
Var newArray = newArray(100); //makes array with 100 undefined values. \
\
Var splitArray = [\'93jan feb mar apr\'94].split(\'93 \'93); // makes array [\'93jan\'94, \'93feb\'94, \'93mar\'94, \'93apr\'94];\
\
Splitting an empty string (\'93\'94) will separate every single character. \
\

\b Get element: 
\b0 \
\
monthArray[2]; \
\
Var i = 6; \
\
monthArray[I];\
\
monthArray[3];  //= [\'93apr\'94];\
\
  array.length-1 //will refer to the last element of the string.\
\

\b Add element: 
\b0 \
\
hand.push(\'938c\'94); \
\
Hand.push(\'938c\'94, \'934c\'94);  //.push adds element to the end of the array. \
\
hand.unshift(\'938c\'94; //.unshift adds to beginning of the array. Slower. \
\

\b Remove first/last: \
\

\b0 hand.pop();  //pops off last element of array and returns it to you. \
\
hand.shift(); //pops off first element of array and returns it to you. \
\

\b Remove specific position: \
\

\b0 hand.splice(index, how many to remove); //pulls them out and modifies original array. \
\
hand.slice(index, position); //returns subsection of array. If you just do the first index it will grab the rest of the array to the end. \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf0 For loop structure: \
\

\b0 for(var i = 0; I < array.length; i++);\
	start      criteria.          How you go through array\
\

\b Var pretax = [54, 234, 53, 54];		//make new array with taxed values\
Var taxed = []; \
\
for(var i = 0; i < pretax.length; i++) \{\
	taxed.push(pretax[I] * 1.07;\
\}\
\
\cf2 Var str = \'93this is my string\'94;		//capitalize first letter of each word\
Var wordArr = str.split(\'93 \'93);\
\
for(var I = 0; I < wordArr.length; I++) \{\
	wordArr[I] = word[I][0].toUpperCase() + wordArr[I].splice(\cf3 1\cf2 );\
\}\
\
\cf0 Array.join(\'93 \'93);  //joins array and undo\'92s a split. \
\
\cf2 Var numArr = [3, 4, 6, 3];			//new array with only odd numbers\
Var odd = [];\
\
for(var I = 0; I < numArr.length; I++) \{\
	if(numArr[I] % 2 === 1) \{\
		odds.push(numArr[I]);\
\}\
\}
\b0 \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf0 \
\
Array.indexof(\'93 \'93); 		//to find index if you don\'92t know it.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b0 \cf0 \
\cf3 \
Var replace = wordArr.indexOf(\'91my\'92);\
	wordArr.splice(replace, 1, \'93our\'94);\
	wordArr.splice(2, 1, \'93our);\
\cf2 \
\

\b \cf3 Objects: \
\

\b0 Var person = \{\
	age: 15,\
	name: \'93Joe\'94,\
	height: \'936ft\'94,\
	shirt: \{\
		color: \'93green\'94,\
		size: \'93m\'94, \
		type: \'93polo\'94\
		\},\
	favorite_color: \'93yellow\'94\
\}
\b \
\
dot.notation: 
\b0 \
\
person.age\
\
person.shirt.color\
\

\b Bracket.notation:
\b0 \cf2 \

\b \cf0 \

\b0 Person[\'91favorite-color\'92];\
Person[\'91height\'92];\
\
person[\'91shirt\'92].color;\
person[\'91shirt\'92];\
\
Var prop = \'91shirt\'92;\
person[prop];\
\
\

\b Methods: attaching function to object; \
\
Math.round();\
Math.floor();\
Math.sin();\
\

\b0 Person.eat = function(food);\
	console.log(\'93ate\'94 +  food + \'93 and it was good\'94);\
\}\
person.eat(\'93pudding\'94);\
\

\b For in loop structure: \
\

\b0 For(var prop in person) \{\
	console.log(\'93Prop: \'93 + \'93val: \'93 person[prop];\
\
// prop is each individual key. \
\
= \'93prop: age Val: 14\'94 etc\
\

\b \
\
Var obj = \{							//Delete falsey values\
	name: \'93 \'94, \
	height: \'935.9ft\'94, \
	age: 0, \
	likesSushi: true, \
	likesRoadTrips: false\
\}\
								// new object is now // var obj = \{height: \'935.9ft\'94, likesSushi: true\};\
for(var prop in obj) \{\
	if(obj[prop] == false) \{\
		delete obj[prop];\
	\}\
\}\
\
\
\cf2 Hand = [\{							//add property to each value in an array\
	suit: \'93h\'94,\
	value: 5,\
\},\
	suit: \'93d\'94, \
	value: 2\
\}]\
\
for(var I = 0; I < hand.length; I++) \{\
	if(hand[I] .value = \'93a\'94) \{\
		hand.points = 1;\
	\}else if(hand[I].value == \'93k\'94 || hand[I].value == \'93q\'94 || hand[I].vlaue == \'93j\'92) \{\
		hand[I].points = 10;\
	\}else\{\
		hand[I].points = hand[I].value;\
	\}\
\}\
\

\b0 \cf3 Command + d // selects all the same word. \
\

\b switch(hand[I].value \{					//another way to do above function\
	case \'91a\'92:\
		hand[I].points = 1;\
	break;\
	case \'91k\'92:\
	case \'91q\'92:\
	case \'91j\'92:\
		hand[I].points = 10;\
	break;\
	default: \
		hand[I].points = hand[I].value;\
	break;\
\}	\
\}
\b0 \

\b \cf2 	\cf0 \
\
\cf2 Function pickSuit(hand, suit) \{\
	var filteredHand = [];\
\
	for(var I = 0; I < hand.length; I++) \{\
		if(hand[I].suit == suit) \{\
			filterHand.push(hand[I]);\
		\}\
	\}\
		return filteredHand;\
\}\
\
Var diamond = pickSuit(hand, \'91d\'92);\
console.log(diamonds.tostring());\
\
\
\cf3 Higher Functions: \
\

\b0 Sort = default is aphabetize. \
\
	monthArr.sort();\
\

\b var number = [1, 345, 4, 235, 23];\
	\
Number.sort(function(a, b) \{\
	return b.suit < a.suit;     				// or return b.points = a.points;\
\
\
\cf2 Var pretax = [23, 53, 51];					// .map is the generic array for loop\
\
Var postax = pretax.map(function(e) \{\
	return Math.round(e * 1.07 * 100) /100;\
\}\
Var posttax = pretax.map(calctax);\
\
\
\
\cf3 WordArr.map(function(e) \{				//capitalize first letter of each word;\
	returne[o].toUpperCase() + e.slice(1).toLowercase();\
\});\cf2 \
\
\cf0 \
\
\cf2 hand.forEach(assignPointsToCard \{ 			//forEach like map but doesn\'92t return anything. \
\
\
\cf0 \
Number.filter(function(e) \{				//make new array with only odd properties\
	(return true; // keeps it. False returns nothing)\
Return e%2==1;\
\});\
\
\
\cf2 Var spades = hand.filter(function(e) \{			//find specific suit in hand\
	return e.suits == \'93s\'94;\
\});\cf0 \
\
\
Higher order give (e, I, wholeArray)\
\
.reduce // lets you pass along the array through each step. }